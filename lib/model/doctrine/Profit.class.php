<?php

/**
 * Profit
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    HT
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Profit extends BaseProfit {

    public $plused = false;
    public $minused = false;

    public function getRating() {
        return Vote::getRating($this);
    }

    public function updateDetails($detailsData) {
//        if (!$this->isNew()) {
//            $address = $this->getAddress();
//        } else {
//            $address = new Address();
//            $this->setAddress($address);
//        }
        foreach ($detailsData as $detailData) {
            $detail = new ProfitDetail();
            $detail->fromArray((array) $detailData);
            $detail->Profit = $this;
            $detail->save();
        }

        $this->save();
        return $this;
    }

    public function getTotalProfit() {
        $total = 0;
        foreach ($this->getProfitDetail() as $det) {
            $total += $det->qty;
        }
        return $total;
    }
        
     public function updatePhotos($photos) {
        Doctrine_Query::create()
                ->update('Photo p')
                ->set('p.toward', 'null')
                ->set('p.location_id', 'null')
                ->where('p.location_id = ?', $this->getId())
                ->andWhere('toward = ?', "profit")
                ->execute();

        if (sizeof($photos)) {
            Doctrine_Query::create()
                    ->update('Photo p')
                    ->set('p.toward', '"profit"')
                    ->set('p.location_id', $this->getId())
                    ->whereIn('p.id', $photos)
                    ->execute();
        }
        return $this;
    }
    
    /**
     *
     * @return Doctrine_Collection 
     */
    public function getPhotos() {
        return parent::getPhotoProfit();
    }

    public function save(Doctrine_Connection $conn = null) {

        $conn = $conn ? $conn : $this->getTable()->getConnection();
        $conn->beginTransaction();
        try {
            $ret = parent::save($conn);

            if ($this->getLocation()->location_scope_id == 5) {
                LuceneEngine::updateLuceneIndexFor($this);
            }

            $conn->commit();

            return $ret;
        } catch (Exception $e) {
            $conn->rollBack();
            throw $e;
        }
    }

    public function delete(Doctrine_Connection $conn = null) {
        LuceneEngine::deleteLuceneIndexFor($this);
        return parent::delete($conn);
    }

}